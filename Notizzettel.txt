// =================

Updates Modern C++

Guten Morgen

Peter Loos  // Du

peter.loos@gmx.de

// =================

C / C++ ,  C#,  Java, Mobile Progr. (Java), Dart, 

Back-to-the-Roots: C++

// =================

== 2 Tools

-- Visual Studio (95%)

-- Github: Unterlagen

// =================

Was sind meine Erwartungen

== Überblick
== Dieses Thema SOLL drin sein.
== Muss nächste Woche diese Konzepte einsetzen
== Will Modern C++ QUellcode lesen (verstehen) können
== ....

== Priorisierung nach Praxis Relevanz

== Umstieg "Classic C++" nach "Modern C++"

== Ab welcher Version ...

== Einführung in die neuen Sprachelemente

== emplace


== Manche Konzepte verstehen und umsetzen / anwenden können
== Manche Konzepte verstehen können ... und "später" anwenden können


// =================

Versionen:

C++ 11:

C++ 14: Zwischenversion

C++ 17: Utility-Klassen

C++ 20: Concepts / Requirements

// enums

// =================

a + b:  Temporäres Objekt

Objekt ohne Namen.

Wie ist eine Referenz in C++ definiert:

Als Alias == Da muss ein benanntes Objekt vorhanden sein.

std::string a = "Hello";

std::string& ra = a; 

Beobachtung:

Man möchte temp. Objekte als Referenz übergeben können
und diese auch verändern können:

===> Move-Semantik

std::string&     LValue-Referenz  (C: Links  // Left - Value)

std::string&&    RValue-Referenz  (C: Rechts // Right - Value)

Ist fürTemporäres Objekte,
Objekte ohne Namen.

Whyyyyyyyyyyyyyyyyy ????????????????????????????????

==================================================

Move - Semantik:

... CD0:   temp. Objekt am Stack  // wird freigegeben

... D40:   ist im Vektor drin

==================================================

C++  ==========>  Performanz

Aber: Schwächen:   Überflüssige Kopien

---------------------------------------

C#, Java, ....

Idiom:

Referenz-basiert: new

C++:

Stack-basiert:      als Value am Stack
Referenz-basiert:   new / delete

------------------------------------------

Move-Semantik:

Kopier-Konstruktor
operator=

Verschiebe-Konstruktor
Verschiebenden operator=

2. Beispiel:

... 110:   am Stack / anonym / keinen Namen

... 580


Bild zu Rule-of-Three:

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/RuleOfThree.md

=============================================================

12.30   45 Minuten


auto

Hat mehrere Einsatzfelder

=============================================================

Templates

C++:

Hat viele Idiome:

== objekt-orientierte Sprache
== generische Sprache (Templates)

C++:                       Bjarne Stroustrup  // C with Classes

Generische Programmierung: Alexander Alexandrowitsch Stepanow

Bibliothek: STL std::vector<T>


Generische Programmierung: 

==========> Performanz  

Pro Typ eine eigene Klasse / Funktion optimal code-generiert wird.

================================================

Initialisierung:

int n = 123;

int n{ 123 };

double d1 = ival;      // Compiles
00007FF746878F50  cvtsi2sd    xmm0,dword ptr [ival]  
00007FF746878F55  movsd       mmword ptr [d1],xmm0  

========================================

Lambdas

Aufrufbares Objekt 

"Callable"

Funktor  // Mathematik


Blick hinter die Kulissen: Ein Lambda ist ein aufrufbares Objekt.

Anmerkung: Lambda-Funktion   

NEIN: ein Lambda ist ein OBJEKT !!!!!!!!!!!!!

Syntax: Ist anders.

Ein Lambda ist ein OBJEKT einer (anonymen) Klasse.

Klasse:  Variablen und Funktionen.

==========================================================

Smart-Pointer

new / delete

delete wird vergessen !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Suche nach fehlenden delete's:  Death March 

"Death March" 

von Edward Yourdon (Autor)

Lösungen.

Idee:

a) Klassen und Objekte

b) Konstruktoren 
   Destruktoren

c) Wann wird ein Destruktor aufgerufen:

   Am Ende der Lebenszeit des Objekts: DETERMINISTISCH.

   {
      ...
   }

d) Idee:   new ==> Zeiger.

Hüllenobjekt:

Konstruktoren ==> Zeiger
Destruktor    ==> delete

e) std::auto_ptr  ===> deprecated

f) std::shared_ptr
   std::unique_ptr
   std::weak_ptr

Setzen diese Idee um.

g) Strategien:

std::unique_ptr:

Ein std::unique_ptr-Objekt kann zu einem Zeitpunkt
nur EINEN Besitzer haben.

Man kann std::unique_ptr-Objekte NICHT kopieren.

-------------------------

std::shared_ptr:

Ein std::shared_ptr-Objekt kann zu einem Zeitpunkt
mehrere Besitzer haben.

===> Hauch von C# // Garbage Collection

std::weak_ptr

-------------------------

Copy/Move Elision	Auslassen von Kopier- oder Verschiebe-Operationen

Return Value Optimization (RVO)

Named Return Value Optimization (NRVO)

=======================================

Strategien bei Zeigern:

Per Pointer übergeben:

int* ptr;  // new

Regel:

Es muss in der SW bekannt sein,
wer der Besitzer (Owner) des Zeigers ist.

Dieser darf dann delete aufrufen.

Antwort:

== Das Hauptprogramm
== Das Modul "createAllBusinessObjects"
== Die Funtion "createDynamicObjects"


KÖNNTE: "Jede Funktion, an die ein Zeiger übergeben wird"

KÖNNTE Sinnvoll gewesen sein.

Unique versus Shared ???

1. Ansatz:

Go-for-Unique oder Go-for-Shared

a) std::Unique:   Ein Unique-Ptr hat einen Besitzer.

    muss ihn verschieben .... 

b) std::shared

========================================================

Am Ende: Problem.

Der Shared-Ptr funktioniert nicht immer :)))))))))))))))))))

2 Beispiele:

std::weak_ptr:

a) Funktionsweise <===

b) Whyyyyyyyyyyy ??????????????

Zyklen.

Vorsicht:

Beispiel:

Observer-Pattern:

Quelle: Ist ein Objekt -- hat Status -- dieser ändert sich.

Clients: Diese kennen die Quelle.

         Diese interessieren sich für Änderungen am Status der Quelle

         Diese melden sich an der Quelle an (register, attach, ...)

Quelle:  Kennt Clients (Interface) 

          Verwaltet Interface-Zeiger in einer Liste 

Fazit:

Quelle:  std::shared_ptr. !!!  Besitzer.

Clients: Dto:  shared_ptr.  !!!  Besitzer.

FRAGE:  Wir haben in der Quelle eine Liste  mit Client-Zeigern.

       Sind das shared_ptr oder weak_ptr ??????

a) wenn alle detaches kommen, dann passt es !!!

b) Was passiert, wenn die Quelle "aus dem Scope" geht ..
   oder als solche nicht mehr existert ..

c) Was passiert, wenn ein Client aus dem Scope geht ...

   und sich nicht abgemeldet hat: Sollte nicht sein.

   Diskussion: Etwas "sauber" oder "stringent" führen:

Alternative: Frage // Hinterfragt werden:

Möchte / will eine Quelle für sich in Anspruch nehmen,
zum "Besitzer" eines Clients zu werden ???

attach: std::weak_ptr  // lock  // shared_ptr  // null_ptr

==> Habe eine "Leiche"

std::shared_ptr:    <===  Rolle eines Besitzer
std::weak_ptr:       <===  Rolle eines temp. Besitzer

Visualisierung:   Bauteile

Bauteil:  shared_ptr
Visualisierung:  shared_ptr ?????????????????????  std::weak_ptr

                 nullptr


is_part_of: Containment // FEST // std::shared

loose Kopplung: weak_ptr   ... lock

===========================================================

Frage:
------

[=, &var1, &var2, member = 10]  // type deduction

[&, var1, var2, member = 10]

===========================================================

Algorithmen

Sequentielle Container haben den Operator []
Andere NICHT !!!!!!!


int n = 123;

using iterator = VectorIterator<T>;

typedef VectorIterator<T> iterator;    // 3 %, wo in Modern C++ der typedef nicht geht

Nachmittag: using

==============================================

using:

Mehrfach verwendet ....

== Definition von Datentyp
== NAmensräumen


==========================================================

Online Compiler:

Wandbox

==========================================================

The return of printf : println

C++ 23

==========================================================

Cpp Insights:

Keine Ausführung:

Abbildung "Modern C++" ===> "Classic C++"

Lambda ===> Funktor plus anon. Klasse

for_each  ==>  std::for_each


==========================================================

Container:

2 Methoden: begin // end

==> Iterator // Position

Achtung: Via end wird nicht die "letzte gültige" Position zurückgeliefert,
         sondern die danach.

Das macht das Leben einfacher:

Formulierung:  it != values.end ();   !!!!!!!!!!


for (auto it{ values.begin() }; it != values.end(); ++it) {
    sum += *it;
}

==========================================================

constexpr

Praxis-nah   ==> Ist zu diskutieren !!!

        constexpr Complex c3 = c1 + c2;
00007FF792E56570  movss       xmm0,dword ptr [__real@40800000 (07FF79305CD10h)]  
00007FF792E56578  movss       dword ptr [c3],xmm0  
00007FF792E56580  movss       xmm0,dword ptr [__real@40a00000 (07FF79305CD14h)]  
00007FF792E56588  movss       dword ptr [rbp+8Ch],xmm0  

4.0 == 40800000

5.0 == 40a00000

        Complex c3 = c1 + c2;
00007FF6208C65FF  lea         r8,[c2]  
00007FF6208C6603  lea         rdx,[c3]  
00007FF6208C660A  lea         rcx,[c1]  
00007FF6208C660E  call        ConstExprComplex::Complex::operator+ (07FF620835D4Ch)  


Frage: Anwendung ?????????????????????

Tabellen // Daten, ROM , Vorab berechnen möchte // Laufzeit 

CRC

===============================================

"Der Compiler"

Mythos:   C++  // Standard //

https://en.cppreference.com/w/

C++ 11 / 14 // 17 // 20 // 23

Bemerkung: Nicht immer ist "aktuell" schon jeder Compiler umgestellt.

Beobachtung: gcc // println

inline <==== Hier trifft der Compiler gewisse Entscheidungen.

constexpr: Definition.

Call-to-ACtion:

Was muss in meinem Programm nicht zwingend zur LAufzeit berechnet werden ????

Was kann man rausziehen ???

    // C++: Macros -- Berechnungen
    // Komplexe Konstanten
    constexpr auto result = []() {
        return 123; 
    } ();

a) Kollegen :=)

b) Sind die Compiler ausgereift: Ja, sie sind es!

IMHO

Numerische Berechnungen

Gleitpunktarithmetik  // Genauigkeit


Versuch: Irgendwie diesselbe math. Bibliothek.

Boost:  

float128

#include <boost/multiprecision/float128.hpp>


Literaturhinweis:

Real-Time C++: Efficient Object-Oriented and Template Microcontroller Programming Hardcover – March 27, 2012
by Christopher Michael Kormanyos (Author)


Github:


https://github.com/ckormanyos

========================================================

Literale // Konstante

UDL:  User defined Literal

123

123.465

123.456f

123_km

123_kg

123_pound

0xFF0000_farbe

"11:19:22"_uhrzeit

C/C++:   Lexikon  ==> Konstanten

Lexikon von C++ erweitern.

a) operator ""

b) Syntax:    return_type operator "" SUFFIX (parameter)

              return_type operator "" _rgb (parameter)

              parameter:

              unsigned long long
              long double
              char*

Beispiel:

0x_FF0000_rgb ==> class Color

Frage zu constexpr:

Ist throw erlaubt ????

Offizielle Antwort // Standard: NEIN

Die meisten Compiler akzeptieren jedoch throw !!!

===========================

constexpr: Ab C++ 11

===========================

Variadische Templates:

C++ 11:

Nicht einfach.

Ziel:

a) Wir sollten sie lesen können.

b) Ihr Verständnis hilft uns, C++ besser zu verstehen ...

c) Why ???????????????????????????????????

Frage:

Brauchen wir die Funktion 'printer' mit einem Parameter ???

Depends :-)))

C++ 11: JA

Darüber (C++ 17): NEIN.

A) Why ???????????????????????????????????

Transport von Daten über Methodengrenzen hinweg
-----------------------------------------------




============================================

Klassentemplates

Funktionstemplates

Template Member Function

============================================

Frage: Kann ich einen variadischen Konstruktor bauen ???

Es geht.

============================================

std::initializer_list

Why ?????????????????????????????????

std::vector<>:             Daten ===> HEAP

std::initializer_list<>:   Daten ===> STACK


std::initializer_list ist ein Light-Weight Container:

begin(),
end(),
size()

==============================================

Ausnahme:

std::vector<int> vec1(10);     == Size: 10, alle vorbelegt: 0

std::vector<int> vec2{ 10 };   == Size: 1,  alle vorbelegt: 10

std::vector<int> vec3(10, 10); == Size: 10, alle vorbelegt: 10

std::vector<int> vec4{10, 10}; == Size: 2,  alle vorbelegt: 10

==============================================

C++ ist eine verdammt schwere Sprache :)

delete
vs
delete []

UB Undefined Behaviour

C++ hat das Erbe von C  (void*)

Brüche // Abwärts

===> FAZIT: Nehme // Nimm von C++ nur das, was du kennst // beherrschst.

==============================================

Klassiker:

int n;

// Hat n einen gültigen Wert

if (n == 0)

if (n == -1)

if (n == -22342342)

SAUBER:

int  n;
bool isValid;

C#:  

===============================================

std::variant:

Eine std::variant-Variable kann Daten unterschiedlichen Typs halten,
zu einem Zeitpunkt von einem bestimmten Typ.

Excel // Sheets:  Zellen // Cells

Datentyp: Numerisch (int, double), Date, Currency, Zeichenkette, ...

std::variant cell;  // noch zu verbessern

std::variant<int, double, std::string, float> var{ 123 };

Es gibt Ähnlichkeiten zu einer C-Union.

C-Union: Ich könnte eine int - Variable einer union als float auslesen.

union
{
    float         m_f;
    unsigned char m_array[4];
};

struct Data
{
    int selector;   // index = 1
    union
    {
        float         m_f;
        unsigned char m_array[4];
    };
}


==========================================

std::println("{}", elem);

std::println("{0}", elem);    // C#

ist identisch zu

printf("%d", elem);  // C

printf("%d %d %d", n1, n2, n3);   // C

std::println("{} {} {}", n1, n2, n3);

std::println("{0} {1} {2}", n1, n2, n3);

=============================================

Was ist Folding:

Operatoren:

int summe = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 ;

Wiederholte Anwendung desselben Operators in einem
optimieren AUSDRUCK.

Wozu: PERFORMANZ

Why ?????????????????????????????????????????


=============================================

C++ und Module 

Ersetzt #include

Bringt es - das Modulkonzept - sonst noch was ????

ÜBERSETZUNGSZEIT:

Precompiled HEADER.

=============================================

